#!/usr/bin/python3.9

import click
import sys
import pathlib


CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.option('-V', '--version', "version", help='Show program version', is_flag=True, default=False)
@click.option('-v', '--verbose', "verbose", help='Show verbose output', is_flag=True, default=False)
@click.option('-r', '--range', "slice_range", metavar="<start end>", nargs=2,
              type=click.Tuple([int, int]),
              help='Slice between start and end (inclusive)')
@click.argument('contents', type=str, default="")
@click.command(options_metavar='[options]', context_settings=CONTEXT_SETTINGS)
def cli(version, verbose, contents, slice_range):
    if (version):
        MAJOR = "0"
        MINOR = "1"
        PATCH = "0"
        print(f'slice v{MAJOR}.{MINOR}.{PATCH}')
        return
    if (slice_range is None):
        print("You must pass in a range")
        return
    start, end = slice_range
    output = []

    if contents is None or not contents:
        output = [line.strip() for line in sys.stdin.readlines()]
    else:
        path = pathlib.Path.cwd() / contents
        with open(path, mode='r') as fid:
            output = [line.strip() for line in fid]
    if not output:
        return

    sliced = output[start:end]
    if (verbose):
        print(f'output:\n {output}')
        print(f'sliced:\n {output[start:end]}')
    else:
        for line in sliced:
            print(line)


def slice_tuple(lines):
    string = []
    index = 0
    for line in lines:
        new_string = line.replace("\\n", "\n")
        string.insert(index, new_string)
        index += 1
    return string


if __name__ == '__main__':
    cli()
