# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet bashbang "" b
#!/bin/bash

endsnippet

snippet shbang "" i
#!/bin/sh

endsnippet

snippet nullarg "Description" i
if [[ -z "$1" ]]; then
    $2
fi
endsnippet


snippet checknullargs "Add nullchecks for args" b
if [[ -z "$1" ]]; then
	$2
fi
endsnippet

snippet show_usagefn "Print script help message" b
show_usage() {
	echo "Usage: $1 [$2] "
}
endsnippet

snippet show_usage "Print script help message" i
	echo "Usage: $1 [$2] "
endsnippet

snippet log "Document scripts with useful log message" b
log() {
  echo "== $* ==" 1>&2
  echo 1>&2
}
endsnippet

snippet installfn "Install package if not available" b
install() {
    pkg="\$1"
    if [[ -e "$(command -v "$pkg")" ]]; then
        sudo "$apt" install -y "$pkg"
        ${1:log Installing "$pkg"}
    fi
}
endsnippet

snippet install "Install package if not available" b
[[ -e "$(command -v "${1:$pkg}")" ]] && sudo "${2:$apt}" install -y "$pkg" || :
endsnippet

snippet aptset "Toggles between apt-fast or apt" i
apt=""
[[ -e $(command -v apt-fast) ]] && apt="apt-fast" || apt="apt"
${1:log Using $apt}
endsnippet

snippet copy "Copies to xclip" i
[[ $(command -v xclip) ]] && cat "$1" | xclip -sel clip || :
endsnippet

snippet cmdexists "If command exists then A else B" i
[[ $(command -v $1) ]] && $2 || $3:
endsnippet

snippet fileexists "If file exists then A else B" i
[[ -e "$1" && $2 || ${3:\:}
endsnippet

snippet notexists "If file does not exists then A else B" i
[[ -n "$1" && $2 || ${3:\:}
endsnippet

snippet direxists "If file exists then A else B" i
[[ -d "$1" && $2 || ${3:\:}
endsnippet

snippet dirnotexists "If file exists then A else B" i
[[ ! -d "$1" && $2 || ${3:\:}
endsnippet

snippet vercmp "Compare semver versions of packages" i
$1v="$($1 -v)"
requiredver="$2"
if [ "$(printf '%s\n' "$requiredver" "$1" | sort -V | head -n1)" = "$requiredver" ]; then
	${3:\:}
else
	${4:\:}
fi
endsnippet

snippet wrapper "Wrap a fn/cmd/alias" b
$1() { # Wrapper around gdb that toggles gef configurations
    toggle="\$1"
    if [[ "$toggle" == "$2" ]]; then
        shift # Pop wrapper option
				$4 "\$@"
    else
				$5 "\$@"
    fi
}
endsnippet

snippet newuser "Snippet for adding a new user" b
[[ $(grep -c "^${$1}:" /etc/passwd) == 0 ]] && sudo useradd -m "$1" || :
endsnippet

snippet addkey "Snippet for securely adding gpg keys" i
if [[ ! -e "/etc/apt/trusted.gpg.d/${1:pkg}.gpg/$1") ]]; then
    wget -O - "${2:url}" > "$1.key"
    gpg --no-default-keyring --keyring "./$1_keyring.gpg" --import "$1.key"
    gpg --no-default-keyring --keyring "./$1_keyring.gpg" --export > "./$1.gpg"
    sudo mv "./$1.gpg" "/etc/apt/trusted.gpg.d/elasticsearch.gpg/}$1"
    rm "$1.key $1_keyring.gpg" "$1_keyring.gpg\~"
fi
endsnippet

snippet arg "Sets a function argument" i
${1:var}="$1"
endsnippet

snippet aptaddlist "Adds a source to apt" i
[[ ! -e "/etc/apt/sources.list.d/$1.list" ]] && echo "deb $2/apt stable main" | sudo tee -a /etc/apt/sources.list.d/$1.list || :
endsnippet

snippet pkginstall "Install packages" i
sudo ${1:"$apt"} install -y ${2:pkgs}
endsnippet

snippet cloneif "Clones a repo if it doesn't exist locally" b
clone_ifnot_exists() {
    repo="\$1"
    [[ -d "$repo" ]] && git clone ${1:url} || :
}
endsnippet

snippet sedrep "Replace $1 with $2" i
sed "s/$1/$2/${3:g} $4"
endsnippet

snippet info "Displays a help message" b
info() { echo "${1:{$(date)} $*" 1>&2; }
endsnippet

snippet notifyuser "Sends desktop notification to user" b
sudo -u $USER notify-send "$1" "$2"
endsnippet

snippet notifyusericon "Sends desktop notification to user with icon" b
sudo -u $USER notify-send -i "$1" "$2" "$3"
endsnippet

snippet datefmt "Date formatted as: [YYYY-MM-DD HH:MM:SS TZ]" i
date +"[%F %T %Z]${1: msg}"
endsnippet

snippet expandalias "Expand aliases" b
shopt -s expand_aliases
endsnippet
